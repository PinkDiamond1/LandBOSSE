import LandBOSSE
import pandas as pd
import os
import seaborn as sns

# set development cost
development_cost = 5e6  # value input by the user (generally ranges from $3-10 million)

# define file paths for inputs and outputs
# current NREL filepath for inputs: "//nrel.gov/shared/Wind/Public/Projects/Projects T-Z/TAMA/WTT/BOS modeling/current_model_inputs_and_example_outputs/"
# suggest creating a local copy of this folder when you run the model
input_data_path = "/Users/aeberle/Desktop/bos_model/inputs_open_release_real/"
component_folder = "component_data_proprietary/"  # subfolder for component data
output_data_path = "/Users/aeberle/Desktop/bos_model/outputs/"

# define file names for outputs
file_name_main_outputs = 'output_100turbine.csv'  # main outputs are costs
file_name_other_outputs = 'output_other_params_100turbine.csv'  # other outputs currently include road length and wind multiplier

# open project data file
project_path = os.path.join(input_data_path, "project_scenario_list.csv")
project_data = pd.read_csv(project_path)

# initialize output data frames
scenario_data_compiled = pd.DataFrame(columns=["Scenario", "Phase of construction", "Cost USD"])
scenario_data_full_compiled = pd.DataFrame(columns=["Scenario", "Phase of construction", "Cost USD"])
other_scenario_data_compiled = pd.DataFrame(columns=["Scenario", "Parameter", "Value"])

# loop project ids (scenarios) in project data file and execute model
for i in range(0, len(project_data)):
    # extract name and hub height for scenario
    scenario = project_data['Project ID'][i]
    height = project_data['Hub height m'][i]
    scenario_filename = scenario + ".csv"
    print("\n" + scenario)

    # dictionary of file names for input data (currently only "components" file changes by scenario)
    file_list = {'crane_specs': os.path.join(input_data_path, "crane_specs_columnO-proprietary.csv"),
                 'equip': os.path.join(input_data_path, "equip.csv"),
                 'crew': os.path.join(input_data_path, "crews.csv"),
                 'components': os.path.join(input_data_path + component_folder, scenario_filename),
                 'project': project_path,
                 'equip_price': os.path.join(input_data_path, "equip_price_proprietary.csv"),
                 'crew_price': os.path.join(input_data_path, "crew_price_proprietary.csv"),
                 'material_price': os.path.join(input_data_path, "material_price_proprietary.csv"),
                 'weather': os.path.join(input_data_path, "weather_withtime.csv"),
                 'rsmeans': os.path.join(input_data_path, "rsmeans_data_proprietary.csv")}

    # execute BOS model
    [bos_cost_1, wind_mult_1, road_length, num_turbines, project_size] = LandBOSSE.calculate_bos_cost(files=file_list,
                                                                                                      scenario_name=scenario,
                                                                                                      scenario_height=height,
                                                                                                      development=development_cost)

    # compile results into output data frames
    sum_bos = bos_cost_1.groupby(by="Phase of construction").sum()
    scenario_data = pd.DataFrame(columns=["Scenario", "Phase of construction", "Cost USD"])
    scenario_data['Scenario'] = ([scenario] * 8)
    scenario_data['Phase of construction'] = sum_bos.index.values.tolist()
    scenario_data['Cost USD'] = sum_bos['Cost USD'].values.tolist()
    scenario_data_compiled = scenario_data_compiled.append(scenario_data, sort=False)

    # add row for total costs (sum of all module costs)
    scenario_sum = pd.DataFrame(columns=["Scenario", "Phase of construction", "Cost USD"])
    scenario_sum['Scenario'] = [scenario] * 3
    scenario_sum['Phase of construction'] = ['Total', 'Total per turbine', 'Total per MW']
    scenario_sum['Cost USD'] = [scenario_data['Cost USD'].sum(), scenario_data['Cost USD'].sum() / num_turbines,
                                scenario_data['Cost USD'].sum() / project_size]
    scenario_data_compiled = scenario_data_compiled.append(scenario_sum, sort=False)

    # other outputs
    scenario_weather = pd.DataFrame(columns=["Scenario", "Parameter", "Value"])
    scenario_weather['Scenario'] = [scenario] * 2
    scenario_weather['Parameter'] = ['Wind delay multiplier', 'Road length m']
    scenario_weather['Value'] = [wind_mult_1.iloc[0]['Wind multiplier'], road_length]
    other_scenario_data_compiled = other_scenario_data_compiled.append(scenario_weather, sort=False)

    # save data to csv files
    scenario_data_compiled.to_csv(os.path.join(output_data_path, file_name_main_outputs), index=False)
    other_scenario_data_compiled.to_csv(os.path.join(output_data_path, file_name_other_outputs), index=False)

    scenario_data_full = pd.DataFrame(columns=["Scenario", "Phase of construction", "Cost USD"])
    scenario_data_full['Scenario'] = ([scenario] * 64)
    scenario_data_full['Phase of construction'] = bos_cost_1['Phase of construction'].values.tolist()
    scenario_data_full['Type of cost'] = bos_cost_1['Type of cost'].values.tolist()
    scenario_data_full['Cost USD'] = bos_cost_1['Cost USD'].values.tolist()
    scenario_data_full_compiled = scenario_data_full_compiled.append(scenario_data_full, sort=False)

# data frame manipulation for plotting
split_names = pd.DataFrame(scenario_data_full_compiled['Scenario'].str.split('_', expand=True))
scenario_data_full_compiled['Hub height'] = split_names[1]
scenario_data_full_compiled['Turbine'] = split_names[0]
data_total_by_phase = scenario_data_full_compiled.groupby(by=['Phase of construction', 'Scenario']).sum().reset_index(
    drop=False)
data_total_by_type = scenario_data_full_compiled.groupby(by=['Type of cost', 'Scenario']).sum().reset_index(drop=False)
data_total = scenario_data_full_compiled.groupby(by=['Scenario']).sum().reset_index(drop=False)

sns.set()
sns.set_style("darkgrid")
sns.set_context("poster")
phase_plot = sns.factorplot(x="Scenario", y="Cost USD", data=data_total_by_phase, hue="Phase of construction",
                            kind="bar", size=8, palette=sns.cubehelix_palette(8, start=0.3, rot=-.75),
                            margin_titles=True)
phase_plot.fig.subplots_adjust(top=0.9)
phase_plot.fig.suptitle('Cost by Phase', fontsize=16)
phase_plot.savefig(os.path.join(output_data_path, "scenario_totals_by_phase_construction.png"))

type_plot = sns.factorplot(x="Scenario", y="Cost USD", data=data_total_by_type, hue="Type of cost",
                           kind="bar", size=8, palette=sns.cubehelix_palette(8))
type_plot.fig.subplots_adjust(top=0.9)
type_plot.fig.suptitle('Cost by Type', fontsize=16)
type_plot.savefig(os.path.join(output_data_path, "scenario_totals_by_type_cost.png"))

total_plot = sns.factorplot(x="Scenario", y="Cost USD", data=data_total, kind="bar", size=8,
                            palette=sns.color_palette("muted"))
total_plot.fig.subplots_adjust(top=0.9)
total_plot.fig.suptitle('Total Cost', fontsize=16)
total_plot.savefig(os.path.join(output_data_path, "scenario_total.png"))
